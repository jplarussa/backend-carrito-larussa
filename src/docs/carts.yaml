paths:
  /api/carts/:
    post:
      summary: Create a cart
      tags:
        - Carts
      responses:
        "200":
          description: Cart created successfully
          content:
            application/json:
              schema:
                $ref: "#components/schemas/Emptycart"
        "400":
          description: Error creating the cart

  /api/carts/{cid}:
    get:
      summary: Get a Cart object based on an ID
      tags:
        - Carts
      parameters:
        - name: cid
          in: path
          description: ID of the cart to return
          required: true
          schema:          
            $type: String
      responses:
        "200":
          description: Cart found successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
        "400":
          description: Error getting the requested cart
    delete:
      summary: Delete a cart based on an ID
      tags:
        - Carts
      parameters:
        - name: cid
          in: path
          description: ID of the object to return
          required: true
          schema:
            $type: String
      responses:
        "200":
          description: Cart successfully deleted
        "400":
          description: Error deleting requested cart

  /api/carts/{cid}/products/{pid}:
    put:
      summary: Update a cart's product
      tags:
        - Carts
      description: Update a product of the cart based on an Cart ID and Product ID and return the ID of the Product and an OK status
      parameters:
        - name: cid
          in: path
          description: ID of the cart to update
          required: true
          schema:
            $type: String
        - name: pid
          in: path
          description: ID of the product to update
          required: true
          schema:
            $type: String
    delete:
      summary: Delete a product from the cart based on an Cart ID and Product ID and return the ID of the Product and an OK status
      tags:
        - Carts
      parameters:
        - name: cid
          in: path
          description: ID of the cart to update
          required: true
          schema:
            $type: String
        - name: pid
          in: path
          description: ID of the product to remove from the cart
          required: true
          schema:
            $type: String
      responses:
        "200":
          description: Product removed from cart successfully
        "400":
          description: Error removing the requested product from the cart

  /api/carts/{cid}/purchase:
    post:
      summary: Purchase the cart
      tags:
        - Carts
      description: Update the cart based on an ID and a user's email,
        update the cart with the products that were not available
        and create an order for the available products
        (if the cart was completely available, it will be emptied)
      parameters:
        - name: cid
          in: path
          description: ID of the cart to update
          required: true
          schema:
            $type: String
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#components/requestBodies/generateTicket"
      responses:
        "200":
          description: Purchase successfully generated
          content:
            application/json:
              schema:
                $ref: "#components/schemas/Ticket"
        "400":
          description: Error generating purchase

components:
  examples:
    cartIdExample:
      value:
        cid: 6418d63d3e7632f846cc6a72
    productIdExample:
      value:
        pid: 6418d63d3e7632f846cc6a72
    usernameExample:
      value:
        username: echutob90@gmail.com

  schemas:
    Cart:
      type: object
      properties:
        _id:
          type: ObjectId
          description: Auto-generated ID by MongoDB
        products:
          type: array
          description: Array of products
          items:
            type: object
            properties:
              productId:
                type: ObjectId
                items:
                  $ref: "#components/schemas/Product"
              quantity:
                type: integer
      example:
        _id: 6463061ceaa361eac99c90c6,
        products:
          [
            {
              productId:
                {
                  _id: 648819847232c2a7c0555b20,
                  title: Sony PlayStation 9,
                  description: Next-generation gaming console,
                  price: 579.99,
                  code: 119,
                  status: true,
                  stock: 50,
                  category: electronics,
                  thumbnail: [],
                  owner: jplarussa@gmail.com,
                  __v: 0,
                },
              quantity: 1,
              _id: 64634b05583da700acac7c60,
            },
          ]
    Emptycart:
      type: object
      properties:
        _id:
          type: ObjectId
          description: Auto-generated ID by MongoDB
        products:
          type: array
          description: Array of products
      example: { _id: 6463061ceaa361eac99c90c6, products: [] }
    Ticket:
      type: object
      properties:
        code:
          type: string
          description: Code associated with the purchase ticket
        purchase_datetime:
          type: string
          format: date-time
          description: Purchase date
        amount:
          type: number
          required: true
          description: Total purchase amount
        purchaser:
          type: string
          required: true
          description: User email
        products:
          type: array
          description: Array of products
          items:
            type: object
            properties:
              productId:
                type: ObjectId
                items:
                  $ref: "#components/schemas/Product"
              quantity:
                type: integer
  requestBodies:
    generateTicket:
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
      example:
        email: jplarussa@gmail.com